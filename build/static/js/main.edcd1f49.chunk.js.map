{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["client","mqtt","subscribe","publish","App","note","on","topic","message","toString","setMesg","console","log","_useState","useState","react_default","a","createElement","react","_useState2","Object","slicedToArray","className","id","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"oLAOIA,UAAUC,UAAa,oCAG3BD,EAAOE,UAAU,aACjBF,EAAOG,QAAQ,YAAY,aA6BZC,MA3Bf,WACE,IAAIC,EACJL,EAAOM,GAAG,UAAW,SAAUC,EAAOC,GACpCH,EAAOG,EAAQC,WAEfC,EAAQL,GACRM,QAAQC,IAAIP,KAND,IAAAQ,EAWWC,mBAASC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KAAUH,EAAAC,EAAAC,cAAA,2BAX9BE,EAAAC,OAAAC,EAAA,EAAAD,CAAAP,EAAA,GAWAH,GAXAS,EAAA,GAAAA,EAAA,IAab,OACEJ,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACfP,EAAAC,EAAAC,cAAA,UAAQK,UAAU,cAChBP,EAAAC,EAAAC,cAAA,OAAKM,GAAG,OACRR,EAAAC,EAAAC,cAAA,gCACFF,EAAAC,EAAAC,cAAA,yBAAiBZ,OCnBNmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH1B,EAAAC,EAAAC,cAACF,EAAAC,EAAM0B,WAAP,KACE3B,EAAAC,EAAAC,cAAC0B,EAAD,QAOJnB","file":"static/js/main.edcd1f49.chunk.js","sourcesContent":["\n\nimport * as mqtt from 'mqtt'\nimport React, { useState, Fragment } from 'react';\nimport './App.css';\n\n\nvar client  = mqtt.connect('https://test.mosquitto.org:8080');\n\n\nclient.subscribe('vitalData');\nclient.publish('vitalData',\"Connected\");\n\nfunction App() {\n  var note;\n  client.on('message', function (topic, message) {\n    note = message.toString();\n    // Updates React state with message \n    setMesg(note);\n    console.log(note);\n    //client.end();\n    });\n\n  // Sets default React state \n  const [mesg, setMesg] = useState(<Fragment><em>Waiting... </em></Fragment>);\n\n  return (\n    <div className=\"App\">\n    <header className=\"App-header\">\n      <div id='box'>\n      <h1>Patient Vital Data</h1>\n    <p>The Data is: {note}</p>\n      </div>\n   \n\t\t\n\t\t</header>\n\t\t</div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}